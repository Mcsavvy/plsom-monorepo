# Generated by Django 5.2.1 on 2025-08-14 04:03

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cohorts', '0004_remove_cohort_unique_cohort_name_and_more'),
        ('courses', '0003_alter_course_lecturer'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('text', 'Short Answer'), ('essay', 'Essay/Long Response'), ('yes_no', 'Yes/No'), ('single_choice', 'Single Choice'), ('multiple_choice', 'Multiple Choice'), ('scripture_reference', 'Scripture Reference'), ('document_upload', 'Document Upload'), ('reflection', 'Spiritual Reflection'), ('ministry_plan', 'Ministry Plan'), ('theological_position', 'Theological Position'), ('case_study', 'Ministry Case Study'), ('sermon_outline', 'Sermon Outline')], max_length=20)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True, help_text='Additional context or instructions for this question')),
                ('is_required', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('max_file_size_mb', models.PositiveIntegerField(default=10, help_text='Maximum file size in MB (for file upload questions)')),
                ('allowed_file_types', models.CharField(blank=True, help_text='Comma-separated list of allowed file extensions (e.g., pdf,doc,docx)', max_length=200)),
                ('required_translation', models.CharField(blank=True, help_text='Required Bible translation (e.g., NIV, ESV, NASB)', max_length=50)),
                ('allow_multiple_verses', models.BooleanField(default=True, help_text='Allow multiple scripture references')),
                ('min_word_count', models.PositiveIntegerField(blank=True, help_text='Minimum word count for essay questions', null=True)),
                ('max_word_count', models.PositiveIntegerField(blank=True, help_text='Maximum word count for essay questions', null=True)),
                ('text_max_length', models.PositiveIntegerField(blank=True, help_text='Maximum character length for text inputs', null=True)),
                ('text_placeholder', models.CharField(blank=True, help_text='Placeholder text for input fields', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=300)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_correct', models.BooleanField(default=False, help_text='Mark as correct for auto-graded questions (future feature)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='assessments.question')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('submitted', 'Submitted'), ('graded', 'Graded'), ('returned', 'Returned for Revision')], default='in_progress', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('time_spent_minutes', models.PositiveIntegerField(blank=True, help_text='Total time spent on the test in minutes', null=True)),
                ('score', models.FloatField(blank=True, help_text='Overall score (if graded)', null=True)),
                ('max_score', models.FloatField(blank=True, help_text='Maximum possible score', null=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True, help_text='General feedback from grader')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('graded_by', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['admin', 'lecturer']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submissions_graded', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='test_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_answer', models.TextField(blank=True)),
                ('boolean_answer', models.BooleanField(blank=True, null=True)),
                ('date_answer', models.DateField(blank=True, null=True)),
                ('file_answer', models.FileField(blank=True, null=True, upload_to='test_submissions/')),
                ('answered_at', models.DateTimeField(auto_now=True)),
                ('is_flagged', models.BooleanField(default=False, help_text='Flag for review during grading')),
                ('points_earned', models.FloatField(blank=True, help_text='Points earned for this answer', null=True)),
                ('max_points', models.FloatField(blank=True, help_text='Maximum points possible for this question', null=True)),
                ('feedback', models.TextField(blank=True, help_text='Specific feedback for this answer')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='assessments.question')),
                ('selected_options', models.ManyToManyField(blank=True, help_text='Selected options for choice questions', to='assessments.questionoption')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='assessments.submission')),
            ],
            options={
                'ordering': ['question__order'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('instructions', models.TextField(blank=True, help_text='Instructions for students taking the test')),
                ('time_limit_minutes', models.PositiveIntegerField(blank=True, help_text='Time limit in minutes (optional)', null=True)),
                ('max_attempts', models.PositiveIntegerField(default=1, help_text='Maximum number of attempts allowed', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('allow_review_after_submission', models.BooleanField(default=True, help_text='Allow students to review their answers after submission')),
                ('randomize_questions', models.BooleanField(default=False, help_text='Randomize question order for each student')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('available_from', models.DateTimeField(blank=True, help_text='When the test becomes available to students', null=True)),
                ('available_until', models.DateTimeField(blank=True, help_text='When the test is no longer available', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='cohorts.cohort')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='courses.course')),
                ('created_by', models.ForeignKey(limit_choices_to={'role__in': ['admin', 'lecturer']}, on_delete=django.db.models.deletion.CASCADE, related_name='tests_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='submission',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='assessments.test'),
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assessments.test'),
        ),
        migrations.AddConstraint(
            model_name='questionoption',
            constraint=models.UniqueConstraint(fields=('question', 'order'), name='unique_option_order_per_question'),
        ),
        migrations.AddConstraint(
            model_name='answer',
            constraint=models.UniqueConstraint(fields=('submission', 'question'), name='unique_answer_per_submission_question'),
        ),
        migrations.AddConstraint(
            model_name='test',
            constraint=models.UniqueConstraint(fields=('title', 'course', 'cohort'), name='unique_test_title_course_cohort'),
        ),
        migrations.AddConstraint(
            model_name='submission',
            constraint=models.UniqueConstraint(fields=('test', 'student', 'attempt_number'), name='unique_test_student_attempt'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('test', 'order'), name='unique_question_order_per_test'),
        ),
    ]
