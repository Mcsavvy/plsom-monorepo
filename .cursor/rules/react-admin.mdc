---
globs: admin/**/*.{ts,tsx}
---

# React Admin Dashboard Rules

## Project Structure
- Source code in [admin/src/](mdc:admin/src/)
- Components in [admin/src/components/](mdc:admin/src/components/)
- Pages in [admin/src/pages/](mdc:admin/src/pages/)
- Hooks in [admin/src/hooks/](mdc:admin/src/hooks/)
- Types in [admin/src/types/](mdc:admin/src/types/)

## Technology Stack
- React 18 with TypeScript
- Refine.dev for admin framework
- TanStack Table for data tables
- React Hook Form with Zod validation
- shadcn/ui components with Radix UI primitives
- Tailwind CSS for styling

## Component Guidelines
- Use functional components with TypeScript
- Implement proper prop interfaces
- Use React.forwardRef for components that need ref forwarding
- Follow shadcn/ui component patterns
- Use class-variance-authority (cva) for variant styling

## State Management
- Use React Hook Form for form state
- Implement custom hooks for data fetching
- Use Refine's built-in state management
- Implement proper error handling and loading states

## API Integration
- Use axios for HTTP requests
- Implement proper error handling
- Use Refine's data providers for CRUD operations
- Handle authentication with JWT tokens

## Styling & UI
- Use Tailwind CSS classes
- Follow shadcn/ui design system
- Use CSS variables for theming
- Implement responsive design
- Use proper focus states and accessibility

## Form Handling
- Use React Hook Form with Zod validation
- Implement proper form validation
- Use shadcn/ui form components
- Include proper error messages and loading states

## Data Tables
- Use TanStack Table for complex tables
- Implement proper pagination
- Include sorting and filtering
- Use Refine's table components when possible

## Code Quality
- Use ESLint and Prettier for code formatting
- Implement proper TypeScript types
- Use meaningful variable and function names
- Follow React best practices and hooks rules