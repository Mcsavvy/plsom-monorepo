---
globs: frontend/**/*.{ts,tsx,js,jsx}
---

# Next.js Frontend Rules

## Project Structure
- Use Next.js 15 App Router architecture
- Pages in [frontend/app/](mdc:frontend/app/) with route groups
- Components in [frontend/components/](mdc:frontend/components/)
- Hooks in [frontend/hooks/](mdc:frontend/hooks/)
- Types in [frontend/types/](mdc:frontend/types/)
- Utilities in [frontend/lib/](mdc:frontend/lib/)

## Route Organization
- Use route groups: `(auth)`, `(dashboard)` for layout organization
- Implement proper error boundaries with `error.tsx`
- Use `not-found.tsx` for 404 pages
- Implement loading states with `loading.tsx`

## Technology Stack
- Next.js 15 with React 19
- TypeScript for type safety
- shadcn/ui components with Radix UI
- Tailwind CSS for styling
- PWA capabilities with Serwist
- Framer Motion for animations

## Component Guidelines
- Use Server Components by default
- Use Client Components only when necessary (interactivity, hooks, browser APIs)
- Implement proper TypeScript interfaces
- Use React.forwardRef for components needing refs
- Follow shadcn/ui component patterns

## State Management
- Use React Hook Form for forms
- Implement custom hooks for data fetching
- Use React Context for global state when needed
- Implement proper error boundaries

## API Integration
- Use axios for HTTP requests
- Implement proper error handling
- Use custom hooks for API calls
- Handle authentication with JWT tokens
- Implement proper loading and error states

## Styling & UI
- Use Tailwind CSS with proper responsive design
- Follow shadcn/ui design system
- Use CSS variables for theming
- Implement dark mode support
- Use proper focus states and accessibility

## Form Handling
- Use React Hook Form with Zod validation
- Implement proper form validation
- Use shadcn/ui form components
- Include proper error messages and loading states
- Add space between labels and inputs as per user preference

## PWA Features
- Implement service worker with Serwist
- Add proper manifest.json
- Implement offline functionality
- Use proper caching strategies

## Performance
- Use Next.js Image component for images
- Implement proper code splitting
- Use dynamic imports when appropriate
- Optimize bundle size

## Code Quality
- Use ESLint and Prettier
- Implement proper TypeScript types
- Use meaningful variable and function names
- Follow Next.js and React best practices